"""
№ 8361 Danov2305 (Уровень: Средний)

(А.Богданов) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.

1. Строится двоичная запись числа N.
 2. Далее эта запись обрабатывается по следующему правилу:
 а) если число нечётное и бит чётности (остаток от деления на 2 суммы цифр числа в двоичной системе счисления) нечетный, то к этой записи слева дописывается 1;
 б) если число N четное или бит чётности чётный, то справа к числу дописывается бит чётности.
 3. Шаг 2 повторяется
 4. Полученное число является результатом, представленным в двоичной системе счисления.
 5. Результат переводится в десятичную систему и выводится на экран.
 Например, для исходного числа 12 = 11002 результатом является число 1100002 = 48, а для исходного числа 4 = 1002 результатом является число 100102 = 18. Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число R,  меньшее 100.
"""


def funk(n: int):
    b = f'{n:b}'

    if n % 2 == 1 and [f'{int(r):b}' for r in str(n)].count('1') % 2 == 1:
        b = '1' + b
    elif n % 2 == 0 or "".join([f'{int(r):b}' for r in str(n)]).count('1') % 2 == 0:
        b += bin("".join([f'{int(r):b}' for r in str(n)]).count('1'))[2:]

    # Повторяем второй раз
    if n % 2 == 1 and [f'{int(r):b}' for r in str(n)].count('1') % 2 == 1:
        b = '1' + b
    elif n % 2 == 0 or "".join([f'{int(r):b}' for r in str(n)]).count('1') % 2 == 0:
        b += bin("".join([f'{int(r):b}' for r in str(n)]).count('1'))[2:]

    return int(b, 2)


print(f"проверка: 12 = {funk(12)}")
